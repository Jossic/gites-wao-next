{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jossi\\\\Dropbox\\\\JOSSIC\\\\6-development\\\\Devs\\\\gites-wao\\\\frontend\\\\components\\\\admin\\\\lists\\\\ListMessages.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Table } from 'reactstrap';\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { getCookie } from '../../../actions/authActions';\nimport { Alert, Spinner } from 'reactstrap';\nimport { countMessageNonLus, listAllMessages, removeMessage } from '../../../actions/messageActions';\n\nconst ListMessages = ({\n  messages,\n  newMessages\n}) => {\n  const token = getCookie('token');\n  const {\n    0: values,\n    1: setvalues\n  } = useState({\n    loading: false,\n    error: '',\n    success: '',\n    message: ''\n  });\n  const {\n    loading,\n    success,\n    error,\n    message\n  } = values;\n\n  const deleteMessage = id => {\n    setvalues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: true\n    }));\n    removeMessage(id, token).then(data => {\n      console.log('data vaut', data);\n\n      if (data.error) {\n        setvalues(_objectSpread(_objectSpread({}, values), {}, {\n          loading: false,\n          error: true,\n          success: false\n        }));\n      } else {\n        setvalues(_objectSpread(_objectSpread({}, values), {}, {\n          loading: false,\n          error: '',\n          success: true,\n          message: data.text\n        }));\n      }\n    });\n  };\n\n  const deleteConfirm = id => {\n    let answer = window.confirm(`Suppression du message ${id}, êtes-vous sûr ?`);\n\n    if (answer) {\n      deleteMessage(id);\n    }\n  };\n\n  return __jsx(React.Fragment, null, loading && __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }\n  }), success && __jsx(Alert, {\n    color: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }\n  }, message), error && __jsx(Alert, {\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 14\n    }\n  }, \"Une erreur est survenue\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, \"Vous avez \", newMessages, \" non lus !\"), __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 6\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"#ID\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Nom\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Mail\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Tel\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Message\"), __jsx(\"th\", {\n    colSpan: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"R\\xE9pondre/Suppr\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport async function getServerSideProps(context) {\n  const res1 = await listAllMessages();\n  const messages = await res1.json();\n  console.log(messages);\n  const res3 = await countMessageNonLus();\n  const newMessages = await res3;\n  return {\n    props: {\n      messages,\n      newMessages\n    }\n  };\n}\nexport default ListMessages;","map":{"version":3,"sources":["C:/Users/jossi/Dropbox/JOSSIC/6-development/Devs/gites-wao/frontend/components/admin/lists/ListMessages.js"],"names":["Table","useEffect","useState","Link","getCookie","Alert","Spinner","countMessageNonLus","listAllMessages","removeMessage","ListMessages","messages","newMessages","token","values","setvalues","loading","error","success","message","deleteMessage","id","then","data","console","log","text","deleteConfirm","answer","window","confirm","getServerSideProps","context","res1","json","res3","props"],"mappings":"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","sourcesContent":["import { Table } from 'reactstrap';\r\nimport { useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { getCookie } from '../../../actions/authActions';\r\nimport { Alert, Spinner } from 'reactstrap';\r\n\r\nimport {\r\n\tcountMessageNonLus,\r\n\tlistAllMessages,\r\n\tremoveMessage,\r\n} from '../../../actions/messageActions';\r\n\r\nconst ListMessages = ({ messages, newMessages }) => {\r\n\tconst token = getCookie('token');\r\n\r\n\tconst [values, setvalues] = useState({\r\n\t\tloading: false,\r\n\t\terror: '',\r\n\t\tsuccess: '',\r\n\t\tmessage: '',\r\n\t});\r\n\r\n\tconst { loading, success, error, message } = values;\r\n\r\n\tconst deleteMessage = (id) => {\r\n\t\tsetvalues({ ...values, loading: true });\r\n\t\tremoveMessage(id, token).then((data) => {\r\n\t\t\tconsole.log('data vaut', data);\r\n\t\t\tif (data.error) {\r\n\t\t\t\tsetvalues({\r\n\t\t\t\t\t...values,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t\terror: true,\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tsetvalues({\r\n\t\t\t\t\t...values,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t\terror: '',\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: data.text,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tconst deleteConfirm = (id) => {\r\n\t\tlet answer = window.confirm(\r\n\t\t\t`Suppression du message ${id}, êtes-vous sûr ?`\r\n\t\t);\r\n\t\tif (answer) {\r\n\t\t\tdeleteMessage(id);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading && <Spinner />}\r\n\t\t\t{success && <Alert color='success'>{message}</Alert>}\r\n\t\t\t{error && <Alert color='danger'>Une erreur est survenue</Alert>}\r\n\t\t\t<p>Vous avez {newMessages} non lus !</p>\r\n\t\t\t<Table>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>#ID</th>\r\n\t\t\t\t\t\t<th>Nom</th>\r\n\t\t\t\t\t\t<th>Mail</th>\r\n\t\t\t\t\t\t<th>Tel</th>\r\n\t\t\t\t\t\t<th>Message</th>\r\n\t\t\t\t\t\t<th colSpan='2'>Répondre/Suppr</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{/* {messages.map((msge, i) => (\r\n\t\t\t\t\t\t<tr\r\n\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t!msge.vu\r\n\t\t\t\t\t\t\t\t\t? 'shadow p-3 mb-5 bg-red rounded mt-5'\r\n\t\t\t\t\t\t\t\t\t: 'mt-5'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tkey={i}>\r\n\t\t\t\t\t\t\t<th>{msge._id}</th>\r\n\t\t\t\t\t\t\t<th>{msge.nom}</th>\r\n\t\t\t\t\t\t\t<th>{msge.mail}</th>\r\n\t\t\t\t\t\t\t<th>{msge.tel}</th>\r\n\t\t\t\t\t\t\t<th>{msge.msg}</th>\r\n\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\t\thref={`/admin/message/repondre/${msge._id}`}>\r\n\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\tclassName='fas fa-tasks'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ color: 'blue' }}></i>\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\t\thref={`/admin/crud/divers/partenaire/${msge._id}`}>\r\n\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\tclassName='fas fa-reply'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ color: 'black' }}></i>\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\tdeleteConfirm(partenaire._id)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName='fas fa-trash-alt'\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tcolor: 'red',\r\n\t\t\t\t\t\t\t\t\t\tcursor: 'pointer',\r\n\t\t\t\t\t\t\t\t\t}}></i>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))} */}\r\n\t\t\t\t</tbody>\r\n\t\t\t</Table>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport async function getServerSideProps(context) {\r\n\tconst res1 = await listAllMessages();\r\n\tconst messages = await res1.json();\r\n\tconsole.log(messages);\r\n\tconst res3 = await countMessageNonLus();\r\n\tconst newMessages = await res3;\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tmessages,\r\n\t\t\tnewMessages,\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default ListMessages;\r\n"]},"metadata":{},"sourceType":"module"}