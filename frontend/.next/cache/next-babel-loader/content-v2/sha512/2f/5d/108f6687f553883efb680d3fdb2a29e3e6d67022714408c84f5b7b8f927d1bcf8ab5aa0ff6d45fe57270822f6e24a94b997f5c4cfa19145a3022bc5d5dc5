{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { getCookie } from '../actions/authActions';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { QRCreateReducer, QRDeleteReducer, QRListReducer, QRUpdateReducer } from '../reducers/giteReducers';\nconst combinedReducer = combineReducers({\n  QRList: QRListReducer,\n  QRDelete: QRDeleteReducer,\n  QRCreate: QRCreateReducer,\n  QRUpdate: QRUpdateReducer\n}); // create your reducer\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload); //   if (state.count) nextState.count = state.count // preserve count value on client side navigation\n\n\n    return nextState;\n  } else {\n    return combinedReducer(state, action);\n  }\n};\n\nvar isNode = typeof module !== 'undefined';\nlet userInfoFromStorage = null;\n\nif (!isNode) {\n  userInfoFromStorage = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n}\n\nconst userTokenFromCookie = getCookie('token') ? JSON.parse(getCookie('token')) : null; // const userInfoFromStorage = localStorage.getItem('user')\n// \t? JSON.parse(localStorage.getItem('user'))\n// \t: null;\n\nconst initialState = {\n  userLogin: {\n    token: userTokenFromCookie,\n    user: userInfoFromStorage\n  }\n}; // create a makeStore function\n\nconst makeStore = context => createStore(reducer); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/jossi/Dropbox/JOSSIC/6-development/Devs/gites-wao/frontend/components/store.js"],"names":["createStore","combineReducers","createWrapper","HYDRATE","getCookie","composeWithDevTools","QRCreateReducer","QRDeleteReducer","QRListReducer","QRUpdateReducer","combinedReducer","QRList","QRDelete","QRCreate","QRUpdate","reducer","state","action","type","nextState","payload","isNode","module","userInfoFromStorage","localStorage","getItem","JSON","parse","userTokenFromCookie","initialState","userLogin","token","user","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,eADD,EAECC,eAFD,EAGCC,aAHD,EAICC,eAJD,QAKO,0BALP;AAOA,MAAMC,eAAe,GAAGT,eAAe,CAAC;AACvCU,EAAAA,MAAM,EAAEH,aAD+B;AAEvCI,EAAAA,QAAQ,EAAEL,eAF6B;AAGvCM,EAAAA,QAAQ,EAAEP,eAH6B;AAIvCQ,EAAAA,QAAQ,EAAEL;AAJ6B,CAAD,CAAvC,C,CAOA;;AACA,MAAMM,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClC,MAAIA,MAAM,CAACC,IAAP,KAAgBf,OAApB,EAA6B;AAC5B,UAAMgB,SAAS,mCACXH,KADW,GAEXC,MAAM,CAACG,OAFI,CAAf,CAD4B,CAK5B;;;AACA,WAAOD,SAAP;AACA,GAPD,MAOO;AACN,WAAOT,eAAe,CAACM,KAAD,EAAQC,MAAR,CAAtB;AACA;AACD,CAXD;;AAaA,IAAII,MAAM,GAAG,OAAOC,MAAP,KAAkB,WAA/B;AACA,IAAIC,mBAAmB,GAAG,IAA1B;;AACA,IAAI,CAACF,MAAL,EAAa;AACZE,EAAAA,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACnBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADmB,GAEnB,IAFH;AAGA;;AACD,MAAMG,mBAAmB,GAAGxB,SAAS,CAAC,OAAD,CAAT,GACzBsB,IAAI,CAACC,KAAL,CAAWvB,SAAS,CAAC,OAAD,CAApB,CADyB,GAEzB,IAFH,C,CAIA;AACA;AACA;;AAEA,MAAMyB,YAAY,GAAG;AACpBC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,KAAK,EAAEH,mBAAT;AAA8BI,IAAAA,IAAI,EAAET;AAApC;AADS,CAArB,C,CAIA;;AACA,MAAMU,SAAS,GAAIC,OAAD,IAAalC,WAAW,CAACe,OAAD,CAA1C,C,CAEA;;;AACA,OAAO,MAAMoB,OAAO,GAAGjC,aAAa,CAAC+B,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\r\nimport { getCookie } from '../actions/authActions';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {\r\n\tQRCreateReducer,\r\n\tQRDeleteReducer,\r\n\tQRListReducer,\r\n\tQRUpdateReducer,\r\n} from '../reducers/giteReducers';\r\n\r\nconst combinedReducer = combineReducers({\r\n\tQRList: QRListReducer,\r\n\tQRDelete: QRDeleteReducer,\r\n\tQRCreate: QRCreateReducer,\r\n\tQRUpdate: QRUpdateReducer,\r\n});\r\n\r\n// create your reducer\r\nconst reducer = (state, action) => {\r\n\tif (action.type === HYDRATE) {\r\n\t\tconst nextState = {\r\n\t\t\t...state, // use previous state\r\n\t\t\t...action.payload, // apply delta from hydration\r\n\t\t};\r\n\t\t//   if (state.count) nextState.count = state.count // preserve count value on client side navigation\r\n\t\treturn nextState;\r\n\t} else {\r\n\t\treturn combinedReducer(state, action);\r\n\t}\r\n};\r\n\r\nvar isNode = typeof module !== 'undefined';\r\nlet userInfoFromStorage = null;\r\nif (!isNode) {\r\n\tuserInfoFromStorage = localStorage.getItem('user')\r\n\t\t? JSON.parse(localStorage.getItem('user'))\r\n\t\t: null;\r\n}\r\nconst userTokenFromCookie = getCookie('token')\r\n\t? JSON.parse(getCookie('token'))\r\n\t: null;\r\n\r\n// const userInfoFromStorage = localStorage.getItem('user')\r\n// \t? JSON.parse(localStorage.getItem('user'))\r\n// \t: null;\r\n\r\nconst initialState = {\r\n\tuserLogin: { token: userTokenFromCookie, user: userInfoFromStorage },\r\n};\r\n\r\n// create a makeStore function\r\nconst makeStore = (context) => createStore(reducer);\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}