{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { getCookie } from '../actions/authActions';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { QRCreateReducer, QRDeleteReducer, QRListReducer, QRUpdateReducer } from '../reducers/giteReducers'; // create your reducer\n\nvar reducer = combineReducers({\n  QRList: QRListReducer,\n  QRDelete: QRDeleteReducer,\n  QRCreate: QRCreateReducer,\n  QRUpdate: QRUpdateReducer\n}); // (state = { tick: 'init' }, action) => {\n// \tswitch (action.type) {\n// \t\tcase HYDRATE:\n// \t\t\treturn { ...state, ...action.payload };\n// \t\tcase 'TICK':\n// \t\t\treturn { ...state, tick: action.payload };\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// };\n\nvar userTokenFromCookie = getCookie('token') ? JSON.parse(getCookie('token')) : null;\nvar userInfoFromStorage = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\nvar initialState = {\n  userLogin: {\n    token: userTokenFromCookie,\n    user: userInfoFromStorage\n  }\n}; // create a makeStore function\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer, initialState);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/jossi/Dropbox/JOSSIC/6-development/Devs/gites-wao/frontend/components/store.js"],"names":["createStore","combineReducers","createWrapper","HYDRATE","getCookie","composeWithDevTools","QRCreateReducer","QRDeleteReducer","QRListReducer","QRUpdateReducer","reducer","QRList","QRDelete","QRCreate","QRUpdate","userTokenFromCookie","JSON","parse","userInfoFromStorage","localStorage","getItem","initialState","userLogin","token","user","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACCC,eADD,EAECC,eAFD,EAGCC,aAHD,EAICC,eAJD,QAKO,0BALP,C,CAOA;;AACA,IAAMC,OAAO,GAAGT,eAAe,CAAC;AAC/BU,EAAAA,MAAM,EAAEH,aADuB;AAE/BI,EAAAA,QAAQ,EAAEL,eAFqB;AAG/BM,EAAAA,QAAQ,EAAEP,eAHqB;AAI/BQ,EAAAA,QAAQ,EAAEL;AAJqB,CAAD,CAA/B,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMM,mBAAmB,GAAGX,SAAS,CAAC,OAAD,CAAT,GACzBY,IAAI,CAACC,KAAL,CAAWb,SAAS,CAAC,OAAD,CAApB,CADyB,GAEzB,IAFH;AAIA,IAAMc,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACzBJ,IAAI,CAACC,KAAL,CAAWE,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADyB,GAEzB,IAFH;AAIA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,KAAK,EAAER,mBAAT;AAA8BS,IAAAA,IAAI,EAAEN;AAApC;AADS,CAArB,C,CAIA;;AACA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;AAAA,SAAa1B,WAAW,CAACU,OAAD,EAAUW,YAAV,CAAxB;AAAA,CAAlB,C,CAEA;;;AACA,OAAO,IAAMM,OAAO,GAAGzB,aAAa,CAACuB,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\r\nimport { getCookie } from '../actions/authActions';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {\r\n\tQRCreateReducer,\r\n\tQRDeleteReducer,\r\n\tQRListReducer,\r\n\tQRUpdateReducer,\r\n} from '../reducers/giteReducers';\r\n\r\n// create your reducer\r\nconst reducer = combineReducers({\r\n\tQRList: QRListReducer,\r\n\tQRDelete: QRDeleteReducer,\r\n\tQRCreate: QRCreateReducer,\r\n\tQRUpdate: QRUpdateReducer,\r\n});\r\n\r\n// (state = { tick: 'init' }, action) => {\r\n// \tswitch (action.type) {\r\n// \t\tcase HYDRATE:\r\n// \t\t\treturn { ...state, ...action.payload };\r\n// \t\tcase 'TICK':\r\n// \t\t\treturn { ...state, tick: action.payload };\r\n// \t\tdefault:\r\n// \t\t\treturn state;\r\n// \t}\r\n// };\r\n\r\nconst userTokenFromCookie = getCookie('token')\r\n\t? JSON.parse(getCookie('token'))\r\n\t: null;\r\n\r\nconst userInfoFromStorage = localStorage.getItem('user')\r\n\t? JSON.parse(localStorage.getItem('user'))\r\n\t: null;\r\n\r\nconst initialState = {\r\n\tuserLogin: { token: userTokenFromCookie, user: userInfoFromStorage },\r\n};\r\n\r\n// create a makeStore function\r\nconst makeStore = (context) => createStore(reducer, initialState);\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}