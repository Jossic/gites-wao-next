{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { getCookie } from './actions/authActions';\nimport { QRCreateReducer, QRDeleteReducer, QRListReducer, QRUpdateReducer } from './reducers/giteReducers';\nlet store;\nvar isNode = typeof module !== 'undefined';\nlet userInfoFromStorage = null;\n\nif (!isNode) {\n  userInfoFromStorage = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n}\n\nconst userTokenFromCookie = getCookie('token') ? JSON.parse(getCookie('token')) : null;\nconst initialState = {// userLogin: { token: userTokenFromCookie, user: userInfoFromStorage },\n};\nconst combinedReducer = combineReducers({\n  QRList: QRListReducer,\n  QRDelete: QRDeleteReducer,\n  QRCreate: QRCreateReducer,\n  QRUpdate: QRUpdateReducer\n});\n\nfunction initStore(preloadedState = initialState) {\n  return createStore(combinedReducer, preloadedState, composeWithDevTools(applyMiddleware()));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n} // const userInfoFromStorage = localStorage.getItem('user')\n// \t? JSON.parse(localStorage.getItem('user'))\n// \t: null;","map":{"version":3,"sources":["C:/Users/jossi/Dropbox/JOSSIC/6-development/Devs/gites-wao/frontend/store.js"],"names":["useMemo","createStore","applyMiddleware","combineReducers","composeWithDevTools","getCookie","QRCreateReducer","QRDeleteReducer","QRListReducer","QRUpdateReducer","store","isNode","module","userInfoFromStorage","localStorage","getItem","JSON","parse","userTokenFromCookie","initialState","combinedReducer","QRList","QRDelete","QRCreate","QRUpdate","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SACCC,eADD,EAECC,eAFD,EAGCC,aAHD,EAICC,eAJD,QAKO,yBALP;AAOA,IAAIC,KAAJ;AAEA,IAAIC,MAAM,GAAG,OAAOC,MAAP,KAAkB,WAA/B;AACA,IAAIC,mBAAmB,GAAG,IAA1B;;AACA,IAAI,CAACF,MAAL,EAAa;AACZE,EAAAA,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACnBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADmB,GAEnB,IAFH;AAGA;;AACD,MAAMG,mBAAmB,GAAGb,SAAS,CAAC,OAAD,CAAT,GACzBW,IAAI,CAACC,KAAL,CAAWZ,SAAS,CAAC,OAAD,CAApB,CADyB,GAEzB,IAFH;AAIA,MAAMc,YAAY,GAAG,CACpB;AADoB,CAArB;AAIA,MAAMC,eAAe,GAAGjB,eAAe,CAAC;AACvCkB,EAAAA,MAAM,EAAEb,aAD+B;AAEvCc,EAAAA,QAAQ,EAAEf,eAF6B;AAGvCgB,EAAAA,QAAQ,EAAEjB,eAH6B;AAIvCkB,EAAAA,QAAQ,EAAEf;AAJ6B,CAAD,CAAvC;;AAOA,SAASgB,SAAT,CAAmBC,cAAc,GAAGP,YAApC,EAAkD;AACjD,SAAOlB,WAAW,CACjBmB,eADiB,EAEjBM,cAFiB,EAGjBtB,mBAAmB,CAACF,eAAe,EAAhB,CAHF,CAAlB;AAKA;;AAED,OAAO,MAAMyB,eAAe,GAAID,cAAD,IAAoB;AAAA;;AAClD,MAAIE,MAAM,cAAGlB,KAAH,6CAAYe,SAAS,CAACC,cAAD,CAA/B,CADkD,CAGlD;AACA;;;AACA,MAAIA,cAAc,IAAIhB,KAAtB,EAA6B;AAC5BkB,IAAAA,MAAM,GAAGH,SAAS,iCACdf,KAAK,CAACmB,QAAN,EADc,GAEdH,cAFc,EAAlB,CAD4B,CAK5B;;AACAhB,IAAAA,KAAK,GAAGoB,SAAR;AACA,GAZiD,CAclD;;;AACA,YAAmC,OAAOF,MAAP,CAfe,CAgBlD;;AACA,MAAI,CAAClB,KAAL,EAAYA,KAAK,GAAGkB,MAAR;AAEZ,SAAOA,MAAP;AACA,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBZ,YAAlB,EAAgC;AACtC,QAAMT,KAAK,GAAGV,OAAO,CAAC,MAAM2B,eAAe,CAACR,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOT,KAAP;AACA,C,CAED;AACA;AACA","sourcesContent":["import { useMemo } from 'react';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { getCookie } from './actions/authActions';\r\nimport {\r\n\tQRCreateReducer,\r\n\tQRDeleteReducer,\r\n\tQRListReducer,\r\n\tQRUpdateReducer,\r\n} from './reducers/giteReducers';\r\n\r\nlet store;\r\n\r\nvar isNode = typeof module !== 'undefined';\r\nlet userInfoFromStorage = null;\r\nif (!isNode) {\r\n\tuserInfoFromStorage = localStorage.getItem('user')\r\n\t\t? JSON.parse(localStorage.getItem('user'))\r\n\t\t: null;\r\n}\r\nconst userTokenFromCookie = getCookie('token')\r\n\t? JSON.parse(getCookie('token'))\r\n\t: null;\r\n\r\nconst initialState = {\r\n\t// userLogin: { token: userTokenFromCookie, user: userInfoFromStorage },\r\n};\r\n\r\nconst combinedReducer = combineReducers({\r\n\tQRList: QRListReducer,\r\n\tQRDelete: QRDeleteReducer,\r\n\tQRCreate: QRCreateReducer,\r\n\tQRUpdate: QRUpdateReducer,\r\n});\r\n\r\nfunction initStore(preloadedState = initialState) {\r\n\treturn createStore(\r\n\t\tcombinedReducer,\r\n\t\tpreloadedState,\r\n\t\tcomposeWithDevTools(applyMiddleware())\r\n\t);\r\n}\r\n\r\nexport const initializeStore = (preloadedState) => {\r\n\tlet _store = store ?? initStore(preloadedState);\r\n\r\n\t// After navigating to a page with an initial Redux state, merge that state\r\n\t// with the current state in the store, and create a new store\r\n\tif (preloadedState && store) {\r\n\t\t_store = initStore({\r\n\t\t\t...store.getState(),\r\n\t\t\t...preloadedState,\r\n\t\t});\r\n\t\t// Reset the current store\r\n\t\tstore = undefined;\r\n\t}\r\n\r\n\t// For SSG and SSR always create a new store\r\n\tif (typeof window === 'undefined') return _store;\r\n\t// Create the store once in the client\r\n\tif (!store) store = _store;\r\n\r\n\treturn _store;\r\n};\r\n\r\nexport function useStore(initialState) {\r\n\tconst store = useMemo(() => initializeStore(initialState), [initialState]);\r\n\treturn store;\r\n}\r\n\r\n// const userInfoFromStorage = localStorage.getItem('user')\r\n// \t? JSON.parse(localStorage.getItem('user'))\r\n// \t: null;\r\n"]},"metadata":{},"sourceType":"module"}