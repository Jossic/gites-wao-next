{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jossi\\\\Dropbox\\\\JOSSIC\\\\6-development\\\\Devs\\\\gites-wao\\\\frontend\\\\components\\\\admin\\\\lists\\\\ListQR.js\";\nimport { Table } from 'reactstrap';\nimport { listeDesQR, removeQR } from '../../../actions/giteActions';\nimport { useEffect, useState } from 'react';\nimport { API } from '../../../config';\nimport Link from 'next/link';\nimport { getCookie } from '../../../actions/authActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert, Spinner } from 'reactstrap';\nimport Router from 'next/router';\n\nconst ListGites = () => {\n  // const [QRs, setQRs] = useState([]);\n  // const dispatch = useDispatch();\n  const QRList = useSelector(state => state.QRList);\n  const {\n    loading,\n    error,\n    QRs\n  } = QRList; // const userLogin = useSelector((state) => state.userLogin);\n  // const { token, user } = userLogin;\n  // useEffect(() => {\n  // \tif (!user.isAdmin) {\n  // \t\tRouter.push('/login');\n  // \t}\n  // \tdispatch(listeDesQR());\n  // }, [input]);\n  // const [values, setvalues] = useState({\n  // \tloading: false,\n  // \terror: '',\n  // \tsuccess: '',\n  // \tmessage: '',\n  // });\n  // const token = getCookie('token');\n  // const listerLesQR = () => {\n  // \tlisteDesQR().then((data) => {\n  // \t\tif (data.error) {\n  // \t\t\tconsole.log(error);\n  // \t\t} else {\n  // \t\t\tsetQRs(...QRs, data);\n  // \t\t}\n  // \t});\n  // };\n  // useEffect(() => {\n  // \tlisterLesQR();\n  // }, [success]);\n  // const deleteQR = (id) => {\n  // \tsetvalues({ ...values, loading: true });\n  // \tconsole.log('id', id);\n  // \tremoveQR(id, token).then((data) => {\n  // \t\tif (data.error) {\n  // \t\t\tsetvalues({\n  // \t\t\t\t...values,\n  // \t\t\t\tloading: false,\n  // \t\t\t\terror: true,\n  // \t\t\t\tsuccess: false,\n  // \t\t\t});\n  // \t\t} else {\n  // \t\t\tsetvalues({\n  // \t\t\t\t...values,\n  // \t\t\t\tloading: false,\n  // \t\t\t\terror: '',\n  // \t\t\t\tsuccess: true,\n  // \t\t\t\tmessage: data.message,\n  // \t\t\t});\n  // \t\t}\n  // \t});\n  // };\n\n  const deleteConfirm = id => {\n    let answer = window.confirm(`Cette opération est irréversible, Etes-vous sur de vouloir supprimer la question avec l'id ${id} ?`);\n\n    if (answer) {// deleteQR(id);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"R\\xE9ponse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: \"2\",\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: QRs.map(QR => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"mt-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: QR._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: QR.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: QR.reponse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              href: `/admin/crud/divers/qr/${QR._id}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"fas fa-pencil-ruler\",\n                  style: {\n                    color: 'orange'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => deleteConfirm(QR._id),\n              class: \"fas fa-trash-alt\",\n              style: {\n                color: 'red',\n                cursor: 'pointer'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}; // If you build and start the app, the date returned here will have the same\n// value for all requests, as this method gets executed at build time.\n\n\nexport function getStaticProps() {\n  // Note that in this case we're returning the state directly, without creating\n  // the store first (like in /pages/ssr.js), this approach can be better and easier\n  return {\n    props: {\n      initialReduxState: {\n        loading: true,\n        QRs: []\n      }\n    }\n  };\n}\nexport default ListGites;","map":{"version":3,"sources":["C:/Users/jossi/Dropbox/JOSSIC/6-development/Devs/gites-wao/frontend/components/admin/lists/ListQR.js"],"names":["Table","listeDesQR","removeQR","useEffect","useState","API","Link","getCookie","useDispatch","useSelector","Alert","Spinner","Router","ListGites","QRList","state","loading","error","QRs","deleteConfirm","id","answer","window","confirm","map","QR","_id","question","reponse","color","cursor","getStaticProps","props","initialReduxState"],"mappings":"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","sourcesContent":["import { Table } from 'reactstrap';\r\nimport { listeDesQR, removeQR } from '../../../actions/giteActions';\r\nimport { useEffect, useState } from 'react';\r\nimport { API } from '../../../config';\r\nimport Link from 'next/link';\r\nimport { getCookie } from '../../../actions/authActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Alert, Spinner } from 'reactstrap';\r\nimport Router from 'next/router';\r\n\r\nconst ListGites = () => {\r\n\t// const [QRs, setQRs] = useState([]);\r\n\r\n\t// const dispatch = useDispatch();\r\n\r\n\tconst QRList = useSelector((state) => state.QRList);\r\n\tconst { loading, error, QRs } = QRList;\r\n\r\n\t// const userLogin = useSelector((state) => state.userLogin);\r\n\t// const { token, user } = userLogin;\r\n\r\n\t// useEffect(() => {\r\n\t// \tif (!user.isAdmin) {\r\n\t// \t\tRouter.push('/login');\r\n\t// \t}\r\n\t// \tdispatch(listeDesQR());\r\n\t// }, [input]);\r\n\r\n\t// const [values, setvalues] = useState({\r\n\t// \tloading: false,\r\n\t// \terror: '',\r\n\t// \tsuccess: '',\r\n\t// \tmessage: '',\r\n\t// });\r\n\r\n\t// const token = getCookie('token');\r\n\r\n\t// const listerLesQR = () => {\r\n\t// \tlisteDesQR().then((data) => {\r\n\t// \t\tif (data.error) {\r\n\t// \t\t\tconsole.log(error);\r\n\t// \t\t} else {\r\n\t// \t\t\tsetQRs(...QRs, data);\r\n\t// \t\t}\r\n\t// \t});\r\n\t// };\r\n\r\n\t// useEffect(() => {\r\n\t// \tlisterLesQR();\r\n\t// }, [success]);\r\n\r\n\t// const deleteQR = (id) => {\r\n\t// \tsetvalues({ ...values, loading: true });\r\n\t// \tconsole.log('id', id);\r\n\t// \tremoveQR(id, token).then((data) => {\r\n\t// \t\tif (data.error) {\r\n\t// \t\t\tsetvalues({\r\n\t// \t\t\t\t...values,\r\n\t// \t\t\t\tloading: false,\r\n\t// \t\t\t\terror: true,\r\n\t// \t\t\t\tsuccess: false,\r\n\t// \t\t\t});\r\n\t// \t\t} else {\r\n\t// \t\t\tsetvalues({\r\n\t// \t\t\t\t...values,\r\n\t// \t\t\t\tloading: false,\r\n\t// \t\t\t\terror: '',\r\n\t// \t\t\t\tsuccess: true,\r\n\t// \t\t\t\tmessage: data.message,\r\n\t// \t\t\t});\r\n\t// \t\t}\r\n\t// \t});\r\n\t// };\r\n\r\n\tconst deleteConfirm = (id) => {\r\n\t\tlet answer = window.confirm(\r\n\t\t\t`Cette opération est irréversible, Etes-vous sur de vouloir supprimer la question avec l'id ${id} ?`\r\n\t\t);\r\n\t\tif (answer) {\r\n\t\t\t// deleteQR(id);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading && <Spinner />}\r\n\t\t\t{/* {success && <Alert color='success'>{message}</Alert>} */}\r\n\t\t\t{/* {error && <Alert color='danger'>Une erreur est survenue</Alert>} */}\r\n\t\t\t<Table>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t<th>Question</th>\r\n\t\t\t\t\t\t<th>Réponse</th>\r\n\r\n\t\t\t\t\t\t<th colSpan='2'>Actions</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{QRs.map((QR) => (\r\n\t\t\t\t\t\t<tr className='mt-5'>\r\n\t\t\t\t\t\t\t<th>{QR._id}</th>\r\n\t\t\t\t\t\t\t<th>{QR.question}</th>\r\n\t\t\t\t\t\t\t<th>{QR.reponse}</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<Link href={`/admin/crud/divers/qr/${QR._id}`}>\r\n\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\tclass='fas fa-pencil-ruler'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ color: 'orange' }}></i>\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\tonClick={() => deleteConfirm(QR._id)}\r\n\t\t\t\t\t\t\t\t\tclass='fas fa-trash-alt'\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tcolor: 'red',\r\n\t\t\t\t\t\t\t\t\t\tcursor: 'pointer',\r\n\t\t\t\t\t\t\t\t\t}}></i>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</Table>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n// If you build and start the app, the date returned here will have the same\r\n// value for all requests, as this method gets executed at build time.\r\nexport function getStaticProps() {\r\n\t// Note that in this case we're returning the state directly, without creating\r\n\t// the store first (like in /pages/ssr.js), this approach can be better and easier\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tinitialReduxState: {\r\n\t\t\t\tloading: true,\r\n\t\t\t\tQRs: [],\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default ListGites;\r\n"]},"metadata":{},"sourceType":"module"}