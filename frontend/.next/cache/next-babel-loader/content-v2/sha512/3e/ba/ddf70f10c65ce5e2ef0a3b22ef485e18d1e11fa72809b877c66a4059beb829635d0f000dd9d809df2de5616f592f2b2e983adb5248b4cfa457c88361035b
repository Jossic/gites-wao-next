{"ast":null,"code":"import { createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { getCookie } from '../actions/authActions'; // create your reducer\n\nconst reducer = combineReducers({\n  QRList: QRListReducer,\n  QRDelete: QRDeleteReducer,\n  QRCreate: QRCreateReducer,\n  QRUpdate: QRUpdateReducer\n}); // (state = { tick: 'init' }, action) => {\n// \tswitch (action.type) {\n// \t\tcase HYDRATE:\n// \t\t\treturn { ...state, ...action.payload };\n// \t\tcase 'TICK':\n// \t\t\treturn { ...state, tick: action.payload };\n// \t\tdefault:\n// \t\t\treturn state;\n// \t}\n// };\n\nconst userInfoFromStorage = getCookie('token') ? JSON.parse(getCookie('token')) : null;\nconst initialState = {\n  userLogin: {\n    token: userInfoFromStorage\n  }\n}; // create a makeStore function\n\nconst makeStore = context => createStore(reducer, initialState); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/jossi/Dropbox/JOSSIC/6-development/Devs/gites-wao/frontend/components/store.js"],"names":["createStore","createWrapper","HYDRATE","getCookie","reducer","combineReducers","QRList","QRListReducer","QRDelete","QRDeleteReducer","QRCreate","QRCreateReducer","QRUpdate","QRUpdateReducer","userInfoFromStorage","JSON","parse","initialState","userLogin","token","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,SAAT,QAA0B,wBAA1B,C,CAEA;;AACA,MAAMC,OAAO,GAAGC,eAAe,CAAC;AAC/BC,EAAAA,MAAM,EAAEC,aADuB;AAE/BC,EAAAA,QAAQ,EAAEC,eAFqB;AAG/BC,EAAAA,QAAQ,EAAEC,eAHqB;AAI/BC,EAAAA,QAAQ,EAAEC;AAJqB,CAAD,CAA/B,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,mBAAmB,GAAGX,SAAS,CAAC,OAAD,CAAT,GACzBY,IAAI,CAACC,KAAL,CAAWb,SAAS,CAAC,OAAD,CAApB,CADyB,GAEzB,IAFH;AAIA,MAAMc,YAAY,GAAG;AACpBC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,KAAK,EAAEL;AAAT;AADS,CAArB,C,CAIA;;AACA,MAAMM,SAAS,GAAIC,OAAD,IAAarB,WAAW,CAACI,OAAD,EAAUa,YAAV,CAA1C,C,CAEA;;;AACA,OAAO,MAAMK,OAAO,GAAGrB,aAAa,CAACmB,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore } from 'redux';\r\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\r\nimport { getCookie } from '../actions/authActions';\r\n\r\n// create your reducer\r\nconst reducer = combineReducers({\r\n\tQRList: QRListReducer,\r\n\tQRDelete: QRDeleteReducer,\r\n\tQRCreate: QRCreateReducer,\r\n\tQRUpdate: QRUpdateReducer,\r\n});\r\n\r\n// (state = { tick: 'init' }, action) => {\r\n// \tswitch (action.type) {\r\n// \t\tcase HYDRATE:\r\n// \t\t\treturn { ...state, ...action.payload };\r\n// \t\tcase 'TICK':\r\n// \t\t\treturn { ...state, tick: action.payload };\r\n// \t\tdefault:\r\n// \t\t\treturn state;\r\n// \t}\r\n// };\r\n\r\nconst userInfoFromStorage = getCookie('token')\r\n\t? JSON.parse(getCookie('token'))\r\n\t: null;\r\n\r\nconst initialState = {\r\n\tuserLogin: { token: userInfoFromStorage },\r\n};\r\n\r\n// create a makeStore function\r\nconst makeStore = (context) => createStore(reducer, initialState);\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}